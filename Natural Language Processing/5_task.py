# -*- coding: utf-8 -*-
"""UZD5_Gelzinyte.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1u_AN1P0TdiqzFjUaLfT_E2DrJeKWY4gM

#### 1. Pateiktam sakiniui pateikite priklausomybių gramatikos medį, pakeisdami jo fono iš teksto spalvas (spalvas parinkite savo nuožiūra). Atspausdinkite mazgus ir priklausomybių žymas.
"""

tekstas = 'The students exam scores were all fantastic'

import spacy
from spacy import displacy
from spacy.tokens import token

nlp = spacy.load("en_core_web_sm")
doc = nlp(tekstas)

for token in doc:
    print(f'{token.text:{15}}{token.lemma_:{10}}{token.pos_:{10}}  \
    {token.head.text:{10}}{token.dep_:{8}}   {spacy.explain(token.dep_)}')


options = { 'bg': 'yellow', 'font': 'Times New Roman', 'color': 'red'}
displacy.render(doc, style = "dep", options = options, jupyter=True)

"""#### 2. Tam pačiam sakiniui pateikite priklausomybių gramatikos medį parinkdami kompaktišką vaizdavimo režimą bei atspausdindami lemas atskiroje eilutėje po sakinio tokenais."""

options = {'compact' : True, 'distance' : 100, 'bg': 'yellow', 'add_lemma' : True, 'color': 'red'}

displacy.render(doc, options = options, jupyter=True)

"""#### 3. Pateiktam sakiniui pateikite priklausomybių gramatikos medį, pakeisdami jo fono iš teksto spalvas (spalvas parinkite savo nuožiūra). Atskiroje eilutėje po sakinio tokenais atspausdinkite lemas. Atspausdinkite mazgus ir priklausomybių žymas.¶"""

!python -m spacy download lt_core_news_sm

tekstas = "žmogus be mokslo kaip namai be langų"

nlp = spacy.load("lt_core_news_sm")
doc = nlp(tekstas)

for token in doc:
    print(f'{token.text:{15}}{token.lemma_:{10}}{token.pos_:{10}}  \
    {token.head.text:{10}}{token.dep_:{8}}   {spacy.explain(token.dep_)}')


options = { 'bg': 'pink', 'font': 'Times New Roman', 'color': 'purple'}
displacy.render(doc, style = "dep", options = options, jupyter=True)

"""#### 4. PDF dokumente pateiktiems sakiniams sukurkite nuo konteksto nepriklausančią gramatiką (angl. context-free grammar). Atspausdinkite gautas sakinių junginių ribas."""

import nltk

# 1) punktas
grammar1 = nltk.CFG.fromstring("""
  S -> NP VP
  VP -> V NP
  PP -> P NP
  V -> "saw"
  NP -> "Mary" | "Bob"
  """)
sent1 = "Mary saw Bob".split()
rd_parser = nltk.RecursiveDescentParser(grammar1)
for tree in rd_parser.parse(sent1):
    print(tree)

# 2 punktas
grammar2 = nltk.CFG.fromstring("""
  S -> NP VP
  VP -> V NP | V NP PP
  PP -> P NP
  V -> "saw"
  NP -> Det N | Det N PP
  Det -> "a" | "the"
  N -> "man" | "dog" | "park"
  P -> "in"
  """)
sent2 = "the dog saw a man in the park".split()
rd_parser = nltk.RecursiveDescentParser(grammar2)
for tree in rd_parser.parse(sent2):
    print(tree)

# 3 punktas
grammar3 = nltk.CFG.fromstring("""
  S -> NP VP
  VP -> V NP
  V -> "wrote"
  NP -> Det N
  Det -> "a" | "the"
  N -> "student" | "equation"
  """)
sent3 = "a student wrote the equation".split()
rd_parser = nltk.RecursiveDescentParser(grammar3)
for tree in rd_parser.parse(sent3):
    print(tree)

# 4 punktas
grammar4 = nltk.CFG.fromstring("""
  S -> NP VP
  VP -> V NP
  V -> "chased"
  NP -> Det Nom
  Det -> "the"
  Nom -> Adj Nom | N
  N -> "bear" | "squirrel"
  Adj -> "angry" | "frightened" | "little"
  """)

sent4 = "the angry bear chased the frightened little squirrel".split()
rd_parser = nltk.RecursiveDescentParser(grammar4)
for tree in rd_parser.parse(sent4):
    print(tree)