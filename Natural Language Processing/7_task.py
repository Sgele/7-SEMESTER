# -*- coding: utf-8 -*-
"""UZD7_Gelzinyte.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ykoMeLG6m44jXW5RTfFCv7sPL35Qgzuv
"""

!pip install spacytextblob

import nltk
nltk.download('vader_lexicon')
import pandas as pd
from nltk.sentiment.vader import SentimentIntensityAnalyzer
from textblob import TextBlob
import sklearn
from sklearn.metrics import accuracy_score,precision_score, recall_score, f1_score
import spacy
from spacytextblob.spacytextblob import SpacyTextBlob
nlp = spacy.load("en_core_web_sm")
nlp.add_pipe('spacytextblob')

df = pd.read_csv("Tweets.csv", sep = ",")
df = df[['tweet_id', 'airline_sentiment', 'text']]
df.head()

#Tikrinam ar nera tusciu reiksmiu
df.isnull().sum()
#nuliniu reiksmiu nera

"""#1

##TextBlob
"""

df = pd.read_csv("Tweets.csv", sep = ",")
df = df[['tweet_id', 'airline_sentiment', 'text']]
df = df[df.airline_sentiment != "neutral"]
#negative ir positive pakeisiu i 'neg' ir 'pos'
df['airline_sentiment'] = df['airline_sentiment'].apply(lambda c: 'pos' if c == 'positive' else 'neg')
df['polarity'] = df['text'].apply(lambda review: TextBlob(review).sentiment.polarity)
df['score'] = df['polarity'].apply(lambda c: 'pos' if c >= 0 else 'neg')
print(accuracy_score(df['airline_sentiment'], df['score']))
df.head()

def Calculations(df):
    print('Accuracy: ', accuracy_score(df['airline_sentiment'], df['score']))
    print('Precision: ', precision_score(df['airline_sentiment'], df['score'], average="weighted"))
    print('Recall: ',recall_score(df['airline_sentiment'], df['score'], average="weighted"))
    print('F1: ',f1_score(df['airline_sentiment'], df['score'], average="weighted"))
    return

def Condition(c):
    if c >= 0:
        return 'pos'
    else:
        return 'neg'

def TextBlob_analysis(df):
    print('\nTextBlob sentiment analysis: ')
    tb = df
    tb['polarity'] = tb['text'].apply(lambda review: TextBlob(review).sentiment.polarity)
    tb['score'] = tb['polarity'].apply(Condition)
    Calculations(tb)
    return

TextBlob_analysis(df)

"""##Vader"""

vd = pd.read_csv("Tweets.csv", sep = ",")
vd = vd[['tweet_id', 'airline_sentiment', 'text']]
vd['airline_sentiment'] = vd['airline_sentiment'].apply(lambda c: 'pos' if c == "positive" else ('neu' if c == 'neutral' else 'neg'))
vd['scores'] = vd['text'].apply(lambda text: sid.polarity_scores(text))
vd['compound'] = vd['scores'].apply(lambda text: text['compound'])
vd['score'] = vd['compound'].apply(lambda c: 'pos' if c >= 0.05 else ('neu' if -0.05 <= c <= 0.05 else 'neg'))

vd.head()

def Calculations(df):
    print('Accuracy: ', accuracy_score(df['airline_sentiment'], df['score']))
    print('Precision: ', precision_score(df['airline_sentiment'], df['score'], average="weighted"))
    print('Recall: ',recall_score(df['airline_sentiment'], df['score'], average="weighted"))
    print('F1: ',f1_score(df['airline_sentiment'], df['score'], average="weighted"))
    return

def Condition(c):
    if c >= 0.05:
        return 'pos'
    elif -0.05 <= c <= 0.05:
        return 'neu'
    else:
        return 'neg'

def VADER_analysis(df):
    print('Vader sentiment analysis: ')
    sid = SentimentIntensityAnalyzer()
    df['scores'] = df['text'].apply(lambda text: sid.polarity_scores(text))
    df['compound'] = df['scores'].apply(lambda score_dict: score_dict['compound'])
    df['comp_score'] = df['compound'].apply(lambda c: 'pos' if c >= 0.05 else ('neu' if -0.05 <= c <= 0.05 else 'neg'))
    Calculations(df)
    return

VADER_analysis(vd)

"""#2"""

vd

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import accuracy_score

#Pirminis teksto apdorojimas
vd.head()
print(len(vd), "\n")
print(vd['airline_sentiment'].value_counts(), '\n' )
print(vd.isnull().sum()) #praleistu reiksmiu nera
vd.dropna(inplace=True)

#Modelio tikslumas turi buti ne maziau nei 62.69%

#Padalijimas i mokymo ir testavimo rinkinius
X = vd['text']
Y = vd['airline_sentiment']

X_train, X_test, Y_train, Y_test = train_test_split(X,Y)

from sklearn.neighbors import KNeighborsClassifier
from sklearn import metrics
from sklearn.pipeline import Pipeline
from sklearn.metrics import confusion_matrix

vectorizer = TfidfVectorizer()
x = vectorizer.fit_transform(vd['airline_sentiment'])
print(vectorizer.get_feature_names_out())

print("Mokymo duomenys",X_train.shape)
print("Testavimo duomenys",X_test.shape)


knn = Pipeline([('tfidf', TfidfVectorizer()), ('clf', KNeighborsClassifier())])

knn.fit(X_train,Y_train)
predictions_knn = knn.predict(X_test)
print('k-nearest neighbor accuracy:', metrics.accuracy_score(Y_test,predictions_knn))
print(metrics.confusion_matrix(Y_test, predictions_knn))

